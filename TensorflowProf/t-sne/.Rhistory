as.Date(as.character(results$V3),format="%b %Y")
as.character(results$V3)
format(as.character(results$V3),"%b %Y")
strptime(as.character(results$V3),"%b %Y")
?strptime
format(as.character(results$V3),format="%b %Y")
str(format(as.character(results$V3),format="%b %Y"))
format("Feb 2018",format="%b %Y")
strptime("Feb 2018",format="%b %Y")
strftime("Feb 2018",format="%b %Y")
strptime("Feb 2018",format="%b %Y")
strptime("1 Feb 2018",format="%d %b %Y")
strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y")
results$V3[4]
strptime("1 Aug 2017",format="%d %b %Y")
strptime("1 Ago 2017",format="%d %b %Y")
localeToCharset()
ys.setlocale(locale="en_EN.UTF-8")
sys.setlocale(locale="en_EN.UTF-8")
Sys.setlocale(locale="en_EN.UTF-8")
Sys.setlocale(locale="us_US.UTF-8")
Sys.setlocale(locale="us")
strptime("1 Aug 2017",format="%d %b %Y")
strptime("1 Ago 2017",format="%d %b %Y")
Sys.setlocale(locale="usa")
Sys.setlocale(locale="USA")
strptime("1 Aug 2017",format="%d %b %Y")
strptime("1 Aug 2017",format="%d %b %Y", locale = "USA")
system("locale -a", intern = TRUE)
sessionInfo()
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
strptime("1 Aug 2017",format="%d %b %Y")
strptime(as.character(results$V3),format="%d %b %Y", locale = "USA")
strptime(as.character(results$V3),format="%d %b %Y")
strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y")
strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y", tz="CST")
strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y", tz="MEXICO")
strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y", tz="CST")
strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y", tz="cst")
results %>%
mutate(V3 = strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y"))
strftime(paste0("1 ",as.character(results$V3)),"%d %b %Y", tz="cst")
str(strptime(paste0("1 ",as.character(results$V3)),"%d %b %Y", tz="cst"))
format(paste0("1 ",as.character(results$V3)),"%d %b %Y")
format(paste0("1 ",as.character(results$V3)),format="%d %b %Y")
date(paste0("1 ",as.character(results$V3)),format="%d %b %Y")
as.Date(paste0("1 ",as.character(results$V3)),format="%d %b %Y")
results <- results %>%
mutate(V3 = as.Date(paste0("1 ",as.character(results$V3)),format="%d %b %Y"))
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
results <- results %>%
mutate(V3 = as.POSIXct(paste0("1 ",as.character(results$V3)),format="%d %b %Y"))
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
results <- results %>%
mutate(V3 = as.POSIXct(paste0("1 ",as.character(results$V3)," 01:00:00.000"),format="%d %b %Y"))
str(results$V3)
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
results <- results %>%
mutate(V3 = as.POSIXct(paste0("1 ",as.character(results$V3)," 01:00:00.000"),format="%d %b %Y %h:%m:%s"))
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
results <- results %>%
mutate(V3 = as.POSIXct(paste0("1 ",as.character(results$V3)," 01:00:00.000"),format="%d %b %Y %H:%M:%S"))
results <- results %>% rename(V1="ID_FAC", V2="ID_EQUIP", V3="per_id")
results <- results %>% rename(V1=ID_FAC, V2=ID_EQUIP, V3=per_id)
results <- results %>% rename(ID_FAC=V1, ID_EQUIP=V2, per_id=V3)
?geom_ribbon
ggplot(data=results) +
geom_line(aes(as.Date(per_id), `Point Forecast`, color = "Serie original")) +
geom_ribbon(aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`)) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Serie original")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`)) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`)) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
str(consumo)
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
results <- results %>%
mutate(V1 = as.integer(V1),
V2 = as.integer(V2),
V3 = as.POSIXct(paste0("1 ",as.character(results$V3)," 01:00:00.000"),format="%d %b %Y %H:%M:%S"))
results <- results %>% rename(ID_FAC=V1, ID_EQUIP=V2, per_id=V3)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`)) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
results$V1[0]
results <- results %>%
mutate(V1 = as.integer(as.character(V1)),
V2 = as.integer(as.character(V2)),
V3 = as.POSIXct(paste0("1 ",as.character(results$V3)," 01:00:00.000"),format="%d %b %Y %H:%M:%S"))
results <- results %>% rename(ID_FAC=V1, ID_EQUIP=V2, per_id=V3)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`)) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`, fill="dodgerblue4")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`), fill="dodgerblue4") +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`), fill="stateblue1") +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 50`, ymax=`Hi 50`), fill="grey70") +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`), fill="slateblue1") +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 50`, ymax=`Hi 50`), fill="grey70") +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 50`, ymax=`Hi 50`), fill="grey70") +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`), fill="slateblue1") +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 50`, ymax=`Hi 50`), fill="grey70") +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`), fill="slateblue1") +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
format_si <- function(...) {
function(x) {
limits <- c(1e-24, 1e-21, 1e-18, 1e-15, 1e-12,
1e-9,  1e-6,  1e-3,  1e0,   1e3,
1e6,   1e9,   1e12,  1e15,  1e18,
1e21,  1e24)
prefix <- c("y",   "z",   "a",   "f",   "p",
"n",   "µ",   "m",   " ",   "k",
"M",   "G",   "T",   "P",   "E",
"Z",   "Y")
# Vector with array indices according to position in intervals
i <- findInterval(abs(x), limits)
# Set prefix to " " for very small values < 1e-24
i <- ifelse(i==0, which(limits == 1e0), i)
paste(format(round(x/limits[i], 1),
trim=TRUE, scientific=FALSE, ...),
prefix[i])
}
}
ggplot() +
geom_line(data=consumo,aes(as.Date(per_id), CONS_MXN, color = "Serie original")) +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 50`, ymax=`Hi 50`), fill="grey70") +
geom_ribbon(data=results,aes(as.Date(per_id), ymin=`Lo 20`, ymax=`Hi 20`), fill="slateblue1") +
geom_line(data=results,aes(as.Date(per_id), `Point Forecast`, color = "Predicción")) +
scale_x_date('Fecha')  +
scale_y_continuous(labels=format_si()) +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
ISOdate(2017, 12, 7)
format(results$per_id, "%Y")
dataset<-consumo
ggplot(dataset) +
geom_line(aes(as.Date(ISOdate(format(results$per_id, "%Y"), format(results$per_id, "%m", format(results$per_id, "%d")), CONS_MXN, color = "Serie original")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
d
ggplot(dataset) +
geom_line(aes(as.Date(ISOdate(format(results$per_id, "%Y"), format(results$per_id, "%m", format(results$per_id, "%d"))), CONS_MXN, color = "Serie original")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
d
ggplot(dataset) +
geom_line(aes(as.Date(ISOdate(format(results$per_id, "%Y"),
format(results$per_id, "%m"),
format(results$per_id, "%d"))),
CONS_MXN, color = "Serie original")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
as.Date(ISOdate(format(results$per_id, "%Y"),
format(results$per_id, "%m"),
format(results$per_id, "%d")))
dataset$Year <-as.int(format(results$per_id, "%Y"))
dataset$Year <-as.integer(format(results$per_id, "%Y"))
dataset<-consumo
ggplot(dataset) +
geom_line(aes(as.Date(ISOdate(format(consumo$per_id, "%Y"),
format(consumo$per_id, "%m"),
format(consumo$per_id, "%d"))),
CONS_MXN, color = "Serie original")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
dataset<-consumo
ggplot(dataset) +
geom_line(aes(as.Date(ISOdate(format(per_id, "%Y"),
format(per_id, "%m"),
format(per_id, "%d"))),
CONS_MXN, color = "Serie original")) +
scale_x_date('Fecha')  +
ylab("Watts por hora") +
xlab("") +
facet_wrap(~ID_EQUIP, nrow = 5)
toDate(2014,10,1)
2014*10000+10*100+1
as.Date(2014*10000+10*100+1)
as.Date(2014*10000+10*100+1,format="%Y%m%d")
as.Date(paste0(2014*10000,10*100,1),format="%Y%m%d")
as.Date(paste0(2014,10,1),format="%Y%m%d")
names(results)
consumo <- consumo %>% mutate(llave=paste0(ID_FAC,'-',ID_EQUIP))
df <- with(consumo, split(consumo, llave))
par(mai = c(.4, .4, .4, 0.4))
modelos <-lapply(df, function(x) {
serie<-ts(x$CONS_MXN, start = c(2014,1), frequency = 12)
fit <- auto.arima(serie, seasonal=TRUE, max.p=3, max.d=2, max.q=3,
max.P=2, max.D=1, max.Q=2)
nombre <- paste0('Model Residuals ',x$llave[1])
tsdisplay(residuals(fit), lag.max=40, main=nombre)
fcast <- forecast(fit, h=12,level=c(20,50))
plot(fcast,main=nombre)
fcast
} )
fac_equip <- names(modelos)
results <- do.call(rbind, lapply(modelos, as.data.frame))
results <- cbind(
results,
as.data.frame(matrix(unlist(strsplit(row.names(results),"[-.]")),300,3,byrow=T))
)
Sys.setlocale("LC_ALL",locale="USA")
Sys.setlocale("LC_TIME",locale="USA")
results <- results %>%
mutate(V1 = as.integer(as.character(V1)),
V2 = as.integer(as.character(V2)),
V3 = as.POSIXct(paste0("1 ",as.character(results$V3)," 01:00:00.000"),format="%d %b %Y %H:%M:%S"))
results <- results %>% rename(ID_FAC=V1, ID_EQUIP=V2, per_id=V3)
conn <-odbcConnect("Energy", uid="energyintelligence", pwd="Paranormal1")
energy <- sqlFetch(conn, "energyTbl")
odbcClose(conn)
energy
bmeq <- energy%>%group_by(ID_EQUIP)%>%summarise(CONS_KWH_EQ_sum=sum(CONS_KWH),
CONS_KWH_EQ_avg=mean(CONS_KWH),
CONS_KWH_EQ_sd=sd(CONS_KWH))
energy <- merge(energy, bmeq, by.x = "ID_EQUIP",by.y = "ID_EQUIP", all.x=TRUE)
bmcat <- energy%>%group_by(DESC_SHRT)%>%summarise(CONS_KWH_CAT_sum=sum(CONS_KWH),
CONS_KWH_CAT_avg=mean(CONS_KWH),
CONS_KWH_CAT_sd=sd(CONS_KWH))
energy <- merge(energy, bmcat, by.x = "DESC_SHRT",by.y = "DESC_SHRT", all.x=TRUE)
energy$cota <- (energy$CONS_KWH_CAT_avg - 1.96*(energy$CONS_KWH_CAT_sd)/sqrt(40))
View(energy)
energy$cota <- (energy$CONS_KWH_CAT_avg.y - 1.96*(energy$CONS_KWH_CAT_sd.y)/sqrt(40))
View(energy)
energy <- sqlFetch(conn, "energyTbl")
eqold <- subset(energy,CONS_KWH_EQ_avg>=cota)
eqold <- subset(energy,CONS_KWH_EQ_avg.x>=cota)
eqnew <- subset(energy,EQUIP_op=min(CONS_KWH_EQ_avg.x))
View(eqnew)
eqnew <- energy%>%group_by(DESC_SHRT,ID_EQUIP)%>%summarise(eq_min=min(CONS_KWH_EQ_avg.x))
View(eqnew)
eqop <- eqnew%>%group_by(DESC_SHRT)%>%summarise(eq_op=min(eq_min))
View(eqop)
eqop <- merge(eqop, eqnew, by.x = "eq_op",by.y = "eq_min", all.x=TRUE)
View(eqop)
myvars <- names(eqold) %in% c("DESC_SHRT", "ID_EQUIP", "ID_FAC")
old <- eqold[myvars]
View(old)
o <- old%>%group_by(DESC_SHRT, ID_EQUIP, ID_FAC)%>%summarise(n=n())
View(o)
equipmentoldTbl <- merge(o, eqop,  by.x = "DESC_SHRT",by.y = "DESC_SHRT.y", all.x=TRUE)
View(equipmentoldTbl)
myvars <- names(energy) %in% c( "ID_EQUIP", "ID_FAC")
facor<-energy[myvars]
View(facor)
facor2 <- facor%>%group_by(ID_EQUIP, ID_FAC)%>%summarise(n=n())
View(facor2)
equipmentoldTbl <- mutate(equipmentoldTbl, ID_EQUIP_old=ID_EQUIP.x,
ID_FAC_old=ID_FAC,
ID_EQUIP_new=ID_EQUIP.y
)
View(equipmentoldTbl)
equipmentoldTbl$ID_EQUIP.x<- NULL
equipmentoldTbl$ID_FAC<- NULL
equipmentoldTbl$ID_EQUIP.y <- NULL
equipmentoldTbl$n <- NULL
equipmentoldTbl$eq_op <- NULL
equipmentoldTbl$DESC_SHRT <- NULL
View(equipmentoldTbl)
equipmentoldTbl <- merge(equipmentoldTbl, facor2,  by.x = "ID_EQUIP_new",by.y = "ID_EQUIP", all.x=TRUE)
equipmentoldTbl <- mutate(equipmentoldTbl,
ID_FAC_new=ID_FAC
)
equipmentoldTbl$ID_FAC<- NULL
equipmentoldTbl$n.y <- NULL
equipmentoldTbl$n.x <- NULL
equipmentoldTbl$eq_op <- NULL
equipmentoldTbl$DESC_SHRT <- NULL
View(equipmentoldTbl)
names(equipmentoldTbl)
conn <-odbcConnect("Energy", uid="energyintelligence", pwd="Paranormal1")
energy <- sqlFetch(conn, "energyTbl")
odbcClose(conn)
library(RODBC)
library(dplyr)
conn <-odbcConnect("Energy", uid="energyintelligence", pwd="Paranormal1")
energy <- sqlFetch(conn, "energyTbl")
odbcClose(conn)
bmeq <- energy%>%group_by(ID_EQUIP)%>%summarise(CONS_MXN_EQ_sum=sum(CONS_MXN),
CONS_MXN_EQ_avg=mean(CONS_MXN),
CONS_MXN_EQ_sd=sd(CONS_MXN))
energy <- merge(energy, bmeq, by.x = "ID_EQUIP",by.y = "ID_EQUIP", all.x=TRUE)
View(bmeq)
bmcat <- energy%>%group_by(DESC_SHRT)%>%summarise(CONS_MXN_CAT_sum=sum(CONS_MXN),
CONS_MXN_CAT_avg=mean(CONS_MXN),
CONS_MXN_CAT_sd=sd(CONS_MXN))
View(bmcat)
energy <- merge(energy, bmcat, by.x = "DESC_SHRT",by.y = "DESC_SHRT", all.x=TRUE)
View(energy)
energy$cota <- (energy$CONS_MXN_CAT_avg.y - 1.96*(energy$CONS_MXN_CAT_sd.y)/sqrt(40))
View(energy)
energy$cota <- (energy$CONS_MXN_CAT_avg - 1.96*(energy$CONS_MXN_CAT_sd)/sqrt(40))
eqold <- subset(energy,CONS_MXN_EQ_avg.x>=cota)
eqold <- subset(energy,CONS_MXN_EQ_avg>=cota)
eqnew <- energy%>%group_by(DESC_SHRT,ID_EQUIP)%>%summarise(eq_min=min(CONS_MXN_EQ_avg.x))
eqnew <- energy%>%group_by(DESC_SHRT,ID_EQUIP)%>%summarise(eq_min=min(CONS_MXN_EQ_avg))
eqop <- eqnew%>%group_by(DESC_SHRT)%>%summarise(eq_op=min(eq_min))
eqop <- merge(eqop, eqnew, by.x = "eq_op",by.y = "eq_min", all.x=TRUE)
myvars <- names(eqold) %in% c("DESC_SHRT", "ID_EQUIP", "ID_FAC")
old <- eqold[myvars]
o <- old%>%group_by(DESC_SHRT, ID_EQUIP, ID_FAC)%>%summarise(n=n())
equipmentoldTbl <- merge(o, eqop,  by.x = "DESC_SHRT",by.y = "DESC_SHRT.y", all.x=TRUE)
myvars <- names(energy) %in% c( "ID_EQUIP", "ID_FAC")
facor<-energy[myvars]
facor2 <- facor%>%group_by(ID_EQUIP, ID_FAC)%>%summarise(n=n())
equipmentoldTbl <- mutate(equipmentoldTbl, ID_EQUIP_old=ID_EQUIP.x,
ID_FAC_old=ID_FAC,
ID_EQUIP_new=ID_EQUIP.y
)
equipmentoldTbl$ID_EQUIP.x<- NULL
equipmentoldTbl$ID_FAC<- NULL
equipmentoldTbl$ID_EQUIP.y <- NULL
equipmentoldTbl$n <- NULL
equipmentoldTbl$eq_op <- NULL
equipmentoldTbl$DESC_SHRT <- NULL
equipmentoldTbl <- merge(equipmentoldTbl, facor2,  by.x = "ID_EQUIP_new",by.y = "ID_EQUIP", all.x=TRUE)
equipmentoldTbl <- mutate(equipmentoldTbl,
ID_FAC_new=ID_FAC
)
equipmentoldTbl$ID_FAC<- NULL
equipmentoldTbl$n.y <- NULL
equipmentoldTbl$n.x <- NULL
equipmentoldTbl$eq_op <- NULL
equipmentoldTbl$DESC_SHRT <- NULL
View(equipmentoldTbl)
?sqlQuery
require("ODBC")
require("RODBC")
?sqlQuery
data<-paste(runif(2268000,0,9),runif(2268000,0,9),runif(2268000,0,9),sep"")
data<-paste(runif(2268000,0,9),runif(2268000,0,9),runif(2268000,0,9),sep="")
head(data)
data<-paste(round(runif(3780000,0,9),0),round(runif(3780000,0,9),0),round(runif(3780000,0,9),0),sep="")
head(data)
write.csv("ejemplo.csv",data)
write.csv(data,"ejemplo.csv")
getwd()
?write.csv
write.csv(data,"ejemplo.csv",quote = FALSE, row.names = FALSE, col.names = FALSE)
install.packages("Rtsne")
library(Rtsne)
train<- read.csv(file.choose()) ## Choose the train.csv file downloaded from the link above
#library(Rtsne)
## Curating the database for analysis with both t-SNE and PCA
Labels<-train$label
train$label<-as.factor(train$label)
## for plotting
colors = rainbow(length(unique(train$label)))
names(colors) = unique(train$label)
## Executing the algorithm on curated data
tsne <- Rtsne(train[,-1], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
plot(tsne$Y, t='n', main="tsne")
text(tsne$Y, labels=train$label, col=colors[train$label])
pca_mnist = princomp(train[,-1])$scores[,1:2]
plot(pca_mnist, t='n')
text(pca_mnist, labels=train$label, col=colors[train$label])
library(readr)
setwd("C:/Users/juan/cursos/Mineria")
setwd("C:/Users/juan/cursos/Mineria")
adult <- read_csv("adult.data")
View(adult)
?read_csv
imports <- read_csv("imports-85.data",na = c("", "NA", "?"))
View(imports)
imports <- read_csv("imports-85.data",na = c("", "NA", "?"))
View(imports)
imports <- read_csv("imports-85.csv",na = c("", "NA", "?"))
problems(imports)
View(imports)
setwd("C:/Users/juan/cursos/Machine Learning/pra¦ücticas/regresio¦ün_logistica")
df <- read_csv("abandono.csv")
View(df)
glm.fit <- glm(Abandono ~ Sexo+Edad+Ingreso+Familia_num+Educacion+Llamadas+Visitas,
family=binomial(link='logit'),
data = df)
summary(glm.fit)
df$score <- ifelse(predict(glm.fit,data=df)>0.5,1,0)
View(df)
table(df$Abandono,df$score)
t<-table(df$Abandono,df$score)
t/sum(t)
train<- read.csv(file.choose()) ## Choose the train.csv file downloaded from the link above
train<- read.csv("train.csv") ## Choose the train.csv file downloaded from the link above
setwd("C:/Users/juan/cursos/Diplomado/diplomado-telefonica/09-Inteligencia_Artificial-La_Ciencia_de_Datos_como_la_puerta_a_la_toma_de_decisiones_secuenciales_automatizadas/Codigo/Tensorflow/t-sne")
train<- read.csv("train.csv") ## Choose the train.csv file downloaded from the link above
#library(Rtsne)
## Curating the database for analysis with both t-SNE and PCA
Labels<-train$label
train$label<-as.factor(train$label)
## for plotting
colors = rainbow(length(unique(train$label)))
names(colors) = unique(train$label)
## Executing the algorithm on curated data
tsne <- Rtsne(train[,-1], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
## Plotting
plot(tsne$Y, t='n', main="tsne")
text(tsne$Y, labels=train$label, col=colors[train$label])
?plot
plot(tsne$Y, main="tsne")
pca_mnist = princomp(train[,-1])$scores[,1:2]
plot(pca_mnist, t='n')
text(pca_mnist, labels=train$label, col=colors[train$label])
